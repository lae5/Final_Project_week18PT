package com.promineotech.candle.service;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.promineotech.candle.dao.CandleOrderDao;
import com.promineotech.candle.entity.Customer;
import com.promineotech.candle.entity.Option;
import com.promineotech.candle.entity.Order;
import com.promineotech.candle.entity.OrderRequest;

@Service
public class DefaultCandleOrderService implements CandleOrderService {
	
	@Autowired
	private CandleOrderDao candleOrderDao;
	@Transactional
	
	public Order createOrder(OrderRequest orderRequest) {
	Customer customer = getCustomer(orderRequest);
	Jeep jeep = getModel(orderRequest);
	Color color = getColor(orderRequest);
	Engine engine = getEngine(orderRequest);
	Tire tire = getTire(orderRequest);
	List<Option> options = getOption(orderRequest);
	BigDecimal price = 
	
	for(Option option : options) {
	price.add(option.getPrice());
	}
	return CandleOrderDao.saveOrder(customer, jeep, color, engine, tire, price, options); }
	/**
	* 
	* @paramorderRequest
	* @return
	*/
	List<Option> getOption(OrderRequest orderRequest) {
	return CandleOrderDao.fetchOptions(orderRequest.getOptions());
	}
	/**
	* 
	* @paramorderRequest
	* @return
	*/
	Tire getTire(OrderRequest orderRequest) {
	return CandleOrderDao.fetchTire(orderRequest.getTire())
	.orElseThrow(() -> new NoSuchElementException(
	"Tire with ID=" + orderRequest.getTire() + " was not found"));
	}
	/**
	* 
	* @paramorderRequest
	* @return
	*/
	Engine getEngine(OrderRequest orderRequest) {
	return jeepOrderDao.fetchEngine(orderRequest.getEngine())
	.orElseThrow(() -> new NoSuchElementException(
	"Engine with ID=" + orderRequest.getEngine() + " was not found"));
	}
	/**
	* 
	* @paramorderRequest
	* @return
	*/
	Color getColor(OrderRequest orderRequest) {
	return jeepOrderDao.fetchColor(orderRequest.getColor())
	.orElseThrow(() -> new NoSuchElementException(
	"Color with ID=" + orderRequest.getColor() + " was not found"));
	}
	/**
	* 
	* @paramorderRequest
	* @return
	*/
	Jeep getModel(OrderRequest orderRequest) {
	return jeepOrderDao
	.fetchModel(orderRequest.getModel(), orderRequest.getTrim(),
	orderRequest.getDoors())
	.orElseThrow(() -> new NoSuchElementException("Model with ID="
	+ orderRequest.getModel() + ", trim=" + orderRequest.getTrim()
	+ orderRequest.getDoors() + " was not found"));
	}
	/**
	* 
	* @paramorderRequest
	* @return
	*/
	Customer getCustomer(OrderRequest orderRequest) {
	return jeepOrderDao.fetchCustomer(orderRequest.getCustomer())
	.orElseThrow(() -> new NoSuchElementException("Customer with ID="
	+ orderRequest.getCustomer() + " was not found"));

	]

}
